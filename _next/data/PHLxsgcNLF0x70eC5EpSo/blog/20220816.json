{"pageProps":{"post":{"id":"20220816","content":"\n## `ClassCastException` does not occur when cast to a different type from the type passed to generic `<T>`\n### 문제가 발생했던 코드\n```java\npublic static <T> T getData(MyObject myObject, Class<T> resultType) throws CustomException{\n  JSONParser parser = new JSONParser();\n  JSONObject result;\n  T data;\n  \n  try{\n    result = (JSONObject) parser.parse(myObject.getPayload());\n    data = (T) result.get(\"data\");\n  } catch(ParseException e) {\n    e.printStackTrace();\n    throw new CustomException(404, e.getMessage());\n  } catch(ClassCastException e){\n    throw new CustomException(500, e.getMessage());\n  }\n  \n  return data;\n}\n```\n- `data = (T) result.get(\"data\");` 이 부분에서 resultType으로 넘긴 것과 실제 \"data\"의 타입이 다르면,  \n  catch 구문에서 `ClassCastException` 예외 처리를 한 뒤 메소드를 호출한 곳에서 CustomException이 발생할 것이라고 예상했음.  \n  하지만 실행해보니 메소드를 호출한 곳에서 `ClassCastException` 예외가 발생.\n\n### Generic `<T>`가 컴파일 될 때\n- [Generic Type Erasure](https://docs.oracle.com/javase/tutorial/java/generics/erasure.html)\n  ```plain\n  Generics were introduced to the Java language to provide tighter type checks at compile time and to support generic programming.  \n  To implement generics, the Java compiler applies type erasure to:\n\n  - Replace all type parameters in generic types with their bounds or Object if the type parameters are unbounded.\n    The produced bytecode, therefore, contains only ordinary classes, interfaces, and methods.\n  - Insert type casts if necessary to preserve type safety.\n  - Generate bridge methods to preserve polymorphism in extended generic types.\n\n  Type erasure ensures that no new classes are created for parameterized types;  \n  consequently, generics incur no runtime overhead.\n  ```\n  - 첫번째 규칙 : java code가 컴파일 될 때, unbound 상태인 파라미터이면 Object로 bound된 파라미터면 bound class로 변경됨.  \n    - code 출처 : [Oracle docs](https://docs.oracle.com/javase/tutorial/java/generics/genTypes.html)\n    ```java\n    //before compile\n    public class Node<T> {\n      private T data;\n      private Node<T> next;\n\n      public Node(T data, Node<T> next){\n        this.data = data;\n        this.next = next;\n      }\n\n      public T getData(){\n        return data;\n      }\n    }\n    //after compile\n    public class Node {\n      private Object data;\n      private Node next;\n\n      public Node(Object data, Node next){\n        this.data = data;\n        this.next = next;\n      }\n\n      public Object getData(){\n        return data;\n      }\n    }\n    ```\n    - 이 규칙에 의해 내가 처음 작성했던 코드가 컴파일 이후에는 `(Object)` 이런식으로 캐스팅하도록 변경됨을 알았음\n      이때, Object는 java 모든 클래스의 상위 클래스이기 때문에 원래 의도하던 객체가 아닌 String이 리턴된다고 해도 예외가 발생할리가 없었다.\n  - 두번째 규칙 : type 안정성을 지키기 위해서 type cast를 추가해준다\n  이 경우 `data = (T) result.get(\"data\");` 대신 `data = (String) result.get(\"data\");` 과 같이 명시적 형변환 할 때 타입을 명시하라는 의도이지만  \n  내가 작성되는 메소드의 리턴 데이터 타입을 이 곳에 명시할 수는 없어서 최종적으로 다음 챕터 코드처럼 수정했음\n\n### 수정한 코드\n```java\npublic static <T> T getData(MyObject myObject, Class<T> resultType) throws CustomException{\n  JSONParser parser = new JSONParser();\n  JSONObject result;\n  T data;\n\n  try{\n    result = (JSONObject) parser.parse(myObject.getPayload());\n    data = resultType.cast(result.get(\"data\"));\n  } catch(ParseException e) {\n    e.printStackTrace();\n    throw new CustomException(404, e.getMessage());\n  } catch(ClassCastException e){\n    throw new CustomException(500, e.getMessage());\n  }\n\n  return data;\n}\n```\n---\nGeneric에 대해서 분명히 취업전에 공부했는데, 막상 실제 업무 코드에 적용하는 것도 그렇고 컴파일 뒤에 어떻게 되는지도 그렇고  \n아직 알아야할 것이 많음을 느꼈다.\n","title":"What happens when jdk compiles the generic type <T>","date":"2022-08-16","category":["backend","java"],"tag":["Generic","Type Erasure","ClassCastException"]},"prev":{"id":"20220803","title":"Linux에서 .conf 파일의 주석으로 사용 가능한 문자열","date":"2022-08-03","category":["os","linux"],"tag":["beanstalk","springboot","nginx"]},"next":{"id":"20221020","title":"Ubuntu 명령어 정리","date":"2022-10-20","category":["os","linux"],"tag":["command"]},"nearPost":[{"id":"20221109","title":"Ubuntu 명령어 정리(2)","date":"2022-11-09","category":["os","linux"],"tag":["command"]},{"id":"20221028","title":"JPA 상속관계 매핑 전략","date":"2022-10-28","category":["backend","spring"],"tag":["jpa","@inheritance","@MappedSuperclass"]},{"id":"20221020","title":"Ubuntu 명령어 정리","date":"2022-10-20","category":["os","linux"],"tag":["command"]},{"id":"20220803","title":"Linux에서 .conf 파일의 주석으로 사용 가능한 문자열","date":"2022-08-03","category":["os","linux"],"tag":["beanstalk","springboot","nginx"]},{"id":"20220707","title":"IntelliJ에서 Spring Boot dev tools 사용하기","date":"2022-07-07","category":["idea","intellij"],"tag":["dev-tools","thymeleaf"]}]},"__N_SSG":true}
{"pageProps":{"post":{"id":"20221020","content":"- 목록\n  * 0. 기본 명령어\n  * 1. File 및 Directory\n    + [`pwd` : Print working directory](#-pwd----print-working-directory)\n    + [`cd` : Change directory](#-cd----change-directory)\n    + [`ls` : List segments](#-ls----list-segments)\n    + [`mv` : Move](#-mv----move)\n    + [`rm` : Remove](#-rm----remove)\n  * 2. 조회 / 출력 / 파일 생성 (`echo` & `touch` & `cat` & `redirection`)\n    + [`echo` : output command](#-echo----output-command)\n    + [`touch` : generate 0 byte file](#-touch----generate-0-byte-file)\n    + [`cat` : con_CAT_enate. read + concatenate + write file](#-cat----con-cat-enate-read---concatenate---write-file)\n  * 3. System\n    + [filesystem mounted on directory](#filesystem-mounted-on-directory)\n\n\n# Linux PC 설치 후 지금까지 썼던 Ubuntu 명령어 정리\n## 0. 기본 명령어\n- 여러 명령어들의 구분\n  ```console\n  m3rri17@:~/test$ echo command test;echo command test2\n  test\n  test2\n  ```\n- edit 모드에서 저장 후 종료(Not vi) : `Ctrl + D`\n## 1. File 및 Directory\n### `pwd` : Print working directory\n  ```console\n  m3rri17@:~/test$ pwd\n  /home/m3rri17/test\n  ```\n### `cd` : Change directory\n- **cd \\/** : move to `/`\n- **cd \\~** : move to `/home`\n- **cd ..** : move to upper directory\n- **cd -** : move to previous directory\n### `ls` : List segments\n- **ls -a** : with hidden files\n- **ls -l** : with detail information  \n  [directory || file][permission] [*link count] [file owner] [file group owner] [size] [update date+time] [name of directory || file]\n- **ls -t** : order by update date desc\n- **ls -S** : order by size desc (! upper case)\n- **ls -r** : order by reversely  \n  default name (z-aZ-A)  \n  :grey_exclamation: *ls -Sr* > order by size asc\n- **ls -i** : with inode number\n- **ls ../** : execute `ls` of parent directory\n- **ls -p** : with `/` suffix\n- **ls -R** : with all directories and files of child directories\n### `mv` : Move\n- **mv file1 file2** : rename file file1 to file2 or overwrite file file1 to file2\n  ```console\n  m3rri17@:~/test$ touch file1 && file2\n  m3rri17@:~/test$ ls\n  file1 file2\n  m3rri17@:~/test$ mv file1 file2\n  m3rri17@:~/test$ ls\n  file2\n  ```\n- **mv file1[ file2 ...] /dir1** : move file file1(+file2+...) to directory dir1\n- **mv /dir1 /dir2** : rename directory dir1 to dir2 or overwrite directory dir1 to dir2\n  - **mv /dir1/\\* /dir2/** : move all of the contents of directory dir1 to dir2\n  ```console\n  m3rri17@:~/test$ touch file{1..5} && mkdir dir1\n  m3rri17@:~/test$ ls -RF\n  .:\n  dir1/ file1 file2 file3 file4 file5\n  \n  ./dir1:\n  m3rri17@:~/test$ mv file1 file5 ./dir1\n  m3rri17@:~/test$ ls -RF\n  .:\n  dir1/ file2 file3 file4\n  \n  ./dir1:\n  file1 file5\n  m3rri17@:~/test$\n  m3rri17@:~/test$ mv file{2..4} ./dir1\n  m3rri17@:~/test$ ls -RF\n  .:\n  dir1/\n  \n  ./dir1:\n  file1 file2 file3 file4 file5\n  m3rri17@:~/test$\n  m3rri17@:~/test$ mv ./dir1 ./dir2\n  m3rri17@:~/test$ ls\n  dir2\n  m3rri17@:~/test$\n  m3rri17@:~/test$ mkdir dir3\n  m3rri17@:~/test$ mv ./dir2/* ./dir3/\n  m3rri17@:~/test$ ls -RF\n  .:\n  dir2/ dir3/\n  \n  ./dir2:\n  \n  ./dir3:\n  file1 file2 file3 file4 file5\n  ```\n### `rm` : Remove\n  - **rm file1** : remove file file1  \n    **rm ./\\*** : remove all files in this directory\n  - **rm -r dir1** : remove directory dir1\n    ```console\n    m3rri17@:~/test$ mkdir dir1 && touch ./dir1/file{1..3}\n    m3rri17@:~/test$ rm ./dir1/file2\n    m3rri17@:~/test$ rm -r dir1\n    ```\n\n## 2. 조회 / 출력 / 파일 생성 (`echo` & `touch` & `cat` & `redirection`)\n### `echo` : output command\n  ```console\n  m3rri17@:~/test$ echo [option] [text]\n  ```\n  - output variable or environment variable\n    ```console\n    m3rri17@:~/test$ echo $PATH\n    /usr/local/sbin:/usr/...~~\n    m3rri17@:~/test$\n    m3rri17@:~/test$ V_NAME=m3rri;V_TEXT=\"My name is\"\n    m3rri17@:~/test$ echo $V_TEXT $V_NAME\n    My name is m3rri\n    ```\n  - output result of command\n    ```console\n    m3rri17@:~/test$ echo PATH=$(echo $PATH)\n    PATH=/usr/local/sbin:/usr/...~~\n    ```\n  - using `\"\"` : long text or text included special token. ;, (, ), etc..\n    ```console\n    m3rri17@:~/test$ echo Multiple command strings are combined with \\\";\\\" or \\\"&&\\\".\n    Multiple command strings are combined with \"\n    \".: 명령을 찾을 수 없습니다\n    m3rri17@:~/test$ echo Multiple command strings are combined with \\\"\";\"\\\" or \\\"\"&&\"\\\"..\n    Multiple command strings are combined with \";\" or \"&&\".\n    ```\n  - options\n    - `-e` : recognize escape character\n      ```console\n      m3rri17@:~/test$ echo \"text1\\ntext2\"\n      text1\\ntext2\n      m3rri17@:~/test$ echo -e \"text1\\ntext2\"\n      text1\n      text2\n      ```\n    - use `help echo`\n      ```console\n      m3rri17@:~/test$ echo --help\n      --help\n      m3rri17@:~/test$ help echo\n      echo: echo [-neE] [인자 ...]\n      ...\n      ```\n  - create or update file using `redirection`\n    - `echo \"content\" > filename`  \n      : If `filename` exists, overwrite it with `content` or create a new file\n    - `echo \"content\" >> filename`  \n      : If `filename` exists, append `content` to `filename` or create a new file\n    ```console\n    m3rri17@:~/test$ echo \"start of content\" > echo_test.txt\n    m3rri17@:~/test$ cat echo_test.txt\n    start of content\n    m3rri17@:~/test$ echo \"new start of content\" > echo_test.txt\n    m3rri17@:~/test$ cat echo_test.txt\n    new start of content\n    m3rri17@:~/test$ echo -e \"\\033[0;36m\\$PATH\\033[1;37m=$(echo $PATH)\" >> echo_test.txt\n    m3rri17@:~/test$ cat echo_test.txt\n    new start of content\n    $PATH=/usr/local/sbin:/usr/~~~\n    ```\n### `touch` : generate 0 byte file\n  ```console\n  m3rri17@:~/test$ touch testfile\n  m3rri17@:~/test$ ls\n  testfile\n  ```\n### `cat` : con_CAT_enate. read + concatenate + write file  \n  출처 : [linuxize post](https://linuxize.com/post/linux-cat-command/)\n  - `cat [options] [file names]`\n  - read file contents\n    ```console\n    m3rri17@:~/test$ echo -e \"linux\\nubuntu\" > catTest\n    m3rri17@:~/test$ cat catTest\n    linux\n    ubuntu\n    ```\n  - redirect contents of file -> copy contents file to file using `redirection`\n    ```console\n    m3rri17@:~/test$ ls\n    catTest\n    m3rri17@:~/test$ cat catTest > catTest2\n    m3rri17@:~/test$ ls\n    catTest catTest2\n    m3rri17@:~/test$ cat catTest2\n    linux\n    ubuntu\n    m3rri17@:~/test$ cat catTest >> catTest2\n    m3rri17@:~/test$ cat -n catTest2\n    1  linux\n    2  ubuntu\n    3  linux\n    4  ubuntu\n    ```\n  - concatenate files : display concatenated contents of argument files\n    ```console\n    m3rri17@:~/test$ cat test1\n    concat test1\n    m3rri17@:~/test$ cat test2\n    concat test2\n    m3rri17@:~/test$ cat test1 test2\n    concat test1\n    concat test2\n    m3rri17@:~/test$ cat test1 test2 > test3\n    m3rri17@:~/test$ cat test3\n    concat test1\n    concat test2\n    ```\n  - create files\n    ```console\n    m3rri17@:~/test$ cat > createCatTest.txt\n    create cat test content\n    m3rri17@:~/test$ cat createCatTest.txt\n    create cat test content\n    m3rri17@:~/test$ cat >> createCatTest.txt\n    append text\n    m3rri17@:~/test$ cat createCatTest.txt\n    create cat test content\n    append text\n    ```\n  - option\n    - `-n` : print line numbers\n    - `-s` : ignore repeated empty lines\n      ```console\n      m3rri17@:~/test$ cat -n testfile\n      1 testline1\n      2 \n      3 \n      4 \n      5 testline2\n      m3rri17@:~/test$ cat -ns testfile\n      1 testline1\n      2 \n      3 testline2\n      ```\n    - `-T` : distinguish visually between tabs and spaces\n    - `-e` : display the each lines ending character `$`\n      ```console\n      m3rri17@:~/test$ cat testfile\n      li      nux\n      ubu     ntu\n      m3rri17@:~/test$ cat -Te testfile\n      li      nux$\n      ubu^Intu$\n      ```\n## 3. System\n### filesystem mounted on directory\n```console\nm3rri17@:~/test$ df -h\nFilesystem Size Used Avail Use% Mounted on\ntmpfs      1.0G 2.7M  1.0G   1% /run\n...\n/dev/3      99G 5.2G   93G   5% /home\n...\n```\n","title":"Ubuntu 명령어 정리","date":"2022-10-20","category":["os","linux"],"tag":["command"]},"prev":{"id":"20220816","title":"What happens when jdk compiles the generic type <T>","date":"2022-08-16","category":["backend","java"],"tag":["Generic","Type Erasure","ClassCastException"]},"next":{"id":"20221028","title":"JPA 상속관계 매핑 전략","date":"2022-10-28","category":["backend","spring"],"tag":["jpa","@inheritance","@MappedSuperclass"]},"nearPost":[{"id":"20221114","title":"Github Action - AWS EC2에 SpringBoot 배포","date":"2022-11-14","category":["tool","git"],"tag":["git-action","Git","aws"]},{"id":"20221109","title":"Ubuntu 명령어 정리(2)","date":"2022-11-09","category":["os","linux"],"tag":["command"]},{"id":"20221028","title":"JPA 상속관계 매핑 전략","date":"2022-10-28","category":["backend","spring"],"tag":["jpa","@inheritance","@MappedSuperclass"]},{"id":"20220816","title":"What happens when jdk compiles the generic type <T>","date":"2022-08-16","category":["backend","java"],"tag":["Generic","Type Erasure","ClassCastException"]},{"id":"20220803","title":"Linux에서 .conf 파일의 주석으로 사용 가능한 문자열","date":"2022-08-03","category":["os","linux"],"tag":["beanstalk","springboot","nginx"]}]},"__N_SSG":true}
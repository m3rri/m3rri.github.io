{"pageProps":{"post":{"id":"20221028","content":"\n## JPA Entity 상속 관계 매핑 전략\n**🌟 출처 : [개발자의 기록습관 - [JPA] 상속관계 매핑 전략(@Inheritance, @DiscriminatorColumn)](https://ict-nroo.tistory.com/128)**\n### 공부하게 된 배경\n\n> 1. Spring 프로젝트에 `JPA Entity`에 생성, 수정 시간 관리를 위한 칼럼이 존재.\n> 2. 국제화를 위해 `UTC`를 기준으로 삼아 BE에서 처리하고 클라이언트에서 시간을 요청 시 FE에서 지역화하기 위해 `@PrePersist`, `@PreUpdate` 어노테이션이 적용된 메소드를 사용.\n> 3. 프로젝트에서 관리하는 Entity가 확대될 경우에도 기준 시간을 UTC로 일정하게 가져가기 위해서 위 메소드를 상속받도록 BaseEntity를 설계\n> 4. 그냥 상속하니까 `@Table` 어노테이션에 설정한 테이블이 아니라 `baseEntity`라는 이름의 테이블이 새로 생기면서 `DTYPE`이라는 칼럼에 원래 테이블 entity명이 입력 됨\n\n### DB의 `super type` :arrow_right: `sub type`를 물리 모델로 구현하는 3가지 방법\n* **Enttiy Diagram**  \n![diagram](https://user-images.githubusercontent.com/94826141/197458035-7ef7dd46-e3c9-4a9b-aea0-a0d096252da2.png)\n* **Entity.class**\n  ```java\n  @Entity\n  public class BaseEntity {\n      @Id\n      @Column(name = \"tuple_id\")\n      private String tupleId;\n      @Column(name = \"create_time\")\n      private Timestamp createTime;\n      @Column(name = \"update_time\")\n      private Timestamp updateTime;\n\n      @PrePersist\n      public void beforeAdd() {\n          LocalDateTime ldt = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);\n          this.createTime = Timestamp.valueOf(ldt);\n      }\n\n      @PreUpdate\n      public void beforeUpdate() {\n          LocalDateTime ldt = LocalDateTime.ofInstant(Instant.now(), ZoneOffset.UTC);\n          this.updateTime = Timestamp.valueOf(ldt);\n      }\n  }\n  ```\n\n1. `JOINED` : 각각의 테이블로 생성한 뒤 조인하는 전략\n  * implement code\n    ```java\n    @Entity\n    @Inheritance(strategy = InheritanceType.JOINED)\n    @DiscriminatorColumn(name=\"DTYPE\") //default가 DTYPE\n    public class BaseEntity {\n        @Id\n        @Column(name = \"tuple_id\")\n        private String tupleId;\n        @Column(name = \"create_time\")\n        private Timestamp createTime;\n        @Column(name = \"update_time\")\n        private Timestamp updateTime;\n\n        @PrePersist\n        ..\n    }\n    ```\n  * `base_item`, `app_a`, `app_b`, `app_c` 4개의 테이블이 관리되며 base_item 테이블에만 tuple_id, create_time, update_time 의 데이터가 저장된다. tuple_id 칼럼이 PK이자 FK가 된다.\n  * 필수로 선언해야 하는 `@DiscriminatorColumn`으로 생성된 `DTYPE` 칼럼은 `sub type` 테이블 중 어떤 곳에 데이터가 생성되었는지 명시하는 역할이며, default는 엔티티 클래스 이름이 사용된다 (`appA`, `appB`, `appC`)\n  * `app_a` 테이블에 신규 데이터를 저장하면 insert query가 두 번 실행되며, `app_a` 데이터를 생성 시간과 함께 조회하고자 하면 조인이 필요해진다.\n  * DB 관점에서 가장 정규화된 구조이며 메모리 측면에서도 잇점이 있다고 한다.\n2. `SINGLE_TABLE` : 통합 테이블로 변환하는 단일 테이블 전략\n  * implement code\n    ```java\n    @Entity\n    @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n    //@DiscriminatorColumn default DTYPE으로 칼럼 생성해줌\n    public class BaseEntity {\n        @Id\n        @Column(name = \"tuple_id\")\n        private String tupleId;\n        @Column(name = \"create_time\")\n        private Timestamp createTime;\n        @Column(name = \"update_time\")\n        private Timestamp updateTime;\n\n        @PrePersist\n        ...\n    }\n    ```\n  * 규모나 복잡도가 크지 않은 엔티티들의 경우 모든 엔티티의 칼럼을 한 테이블에 다 저장하고 `DTYPE`으로 구분할 수 있다.\n  * insert query도 한 번이고, 조인도 필요가 없다.\n  * 진행 중인 프로젝트에서는 appA~appC 에 대한 칼럼 변경이 빈번하게 일어나며 DB를 웹에서만 접근하는 구조가 아니기 때문에 한 테이블에 몰아두고 `DTYPE`으로 구분하여 사용하기에는 무리가 있다.\n3. **`TABLE_PER_CLASS` : 구현 클래스마다 테이블을 생성하는 전략**  \n  * implement code\n    ```java\n    @Entity\n    @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n    public class BaseEntity {\n        @Id\n        @Column(name = \"tuple_id\")\n        private String tupleId;\n        @Column(name = \"create_time\")\n        private Timestamp createTime;\n        @Column(name = \"update_time\")\n        private Timestamp updateTime;\n\n        @PrePersist\n        ...\n    }\n    ```\n  * 1번 JOINED 전략과 유사해보이지만 `super type` 엔티티의 칼럼들을 `sub type`의 엔티티 모두에 동일하게 생성하여 `app_a`, `app_b`, `app_c` 총 3개의 테이블을 관리하게 된다.\n  * `super type` 엔티티로 접근할 경우 `app_a`~`app_c` 를 `UNION` 연산자를 사용하여 조회하기 때문에 이런 경우 성능이 좋다고 할 수는 없다.\n\n---\n\n## 어노테이션 등 설정값 정리\n**🌟 출처 : [victolee - [Spring JPA] 상속(JOINED 전략을 중심으로)](https://victorydntmd.tistory.com/209)**\n### 상속 관계 관련\n  * @Inheritance\n    * 어떤 상속 전략을 사용할 것인지 명시\n  * @DiscriminatorColumn\n    * `super type` 엔티티에서 어떤 칼럼을 사용하여 `sub type` 엔티티를 구분할 것인지 명시\n  * @DiscriminatorValue\n    * 위의 칼럼에서 `sub type` 엔티티 별로 값을 가지도록 지정\n    * DB에서 table column value로 들어갈 값이기 때문에 영어/한글 구분 없이 사용 가능\n### 객체 매핑 관련\n  * @MappedSuperclass\n    * 객체 지향적으로는 상속 관계를 유지하지만 실제 구현될 entity에는 영향을 주지 않기 위해서 사용\n    * `super type` 엔티티에서 `@Entity` 대신 `@MappedSuperclass`로 선언\n      * 실제로 구현 될 엔티티가 아니기 때문에 추상클래스로 선언\n      * `@ID` 로 선언해서 사용할 id 칼럼도 필요없음\n    * 위의 예제에서 `BaseEntity`에 이 어노테이션을 적용하면 `BaseEntity`에 대한 엔티티는 생성되지 않고, `TABLE_PER_CLASS` 전략을 적용한 것과 유사하게 `BaseEntity`에 있는 칼럼을 모두 자식 `sub type` 엔티티에 포함하여 생성\n  * @AttributeOverride / @AttributeOverrides\n    * `@MappedSuperclass`를 사용하는 경우, 부모 클래스의 특정 칼럼을 override하려고 할 때 사용\n    ```java\n    @MappedSuperclass\n    public abstract class BaseEntity{\n        @Column(name = \"create_time\")\n        private Timestamp createTime;\n        @Column(name = \"update_time\")\n        private Timestamp updateTime;\n    }\n\n    @Entity\n    @AttributeOverride(name=\"updateTime\", column=@Column(name=\"app_a_update_time\"))\n    public class AppA extends BaseEntity{\n      private String appAVar;\n    }\n\n    @Entity\n    @AttributeOverrides({\n      @AttributeOverride(name=\"createTime\", column=@Column(name=\"app_b_create_time\")),\n      @AttributeOverride(name=\"updateTime\", column=@Column(name=\"app_b_update_time\")),\n    })\n    public class AppB extends BaseEntity{\n      private String appBVar;\n    }\n    ```\n---\n\n### 결론\n* 원래 적용하려고 했던 내용은 `@MappedSuperclass`를 사용하여 적용하였음\n* 기존에 QueryDsl로 직접 조인하여 select 하도록 설계했던 부분을 JAVA code 상에서 명시적으로 상속 관계에 있음을 파악할 수 있도록 관련있는 엔티티들에 JOINED 전략을 적용하였음\n\n### 참조\n* Entity에서는 여러 변수에 @Id를 선언하여 복합키로써 사용할 수 있는데, 이 경우 @GeneratedValue를 사용할 수가 없다. 직접 할당만 가능  \n(출처 : [catpark's something new - jpa 복합키에서 auto increment](https://www.icatpark.com/entry/jpa-%EB%B3%B5%ED%95%A9%ED%82%A4%EC%97%90%EC%84%9C-auto-increment))\n","title":"JPA 상속관계 매핑 전략","date":"2022-10-28","category":["backend","spring"],"tag":["jpa","@inheritance","@MappedSuperclass"]},"prev":{"id":"20221020","title":"Ubuntu 명령어 정리","date":"2022-10-20","category":["os","linux"],"tag":["command"]},"next":{"id":"20221109","title":"Ubuntu 명령어 정리(2)","date":"2022-11-09","category":["os","linux"],"tag":["command"]},"nearPost":[{"id":"20230209","title":"[js] Default parameters of function & Spread syntax in object literals","date":"2023-02-09","category":["frontend","javascript"],"tag":["javascript","es5","default parameter","spread syntax"]},{"id":"20221114","title":"Github Action - AWS EC2에 SpringBoot 배포","date":"2022-11-14","category":["tool","git"],"tag":["git-action","Git","aws"]},{"id":"20221109","title":"Ubuntu 명령어 정리(2)","date":"2022-11-09","category":["os","linux"],"tag":["command"]},{"id":"20221020","title":"Ubuntu 명령어 정리","date":"2022-10-20","category":["os","linux"],"tag":["command"]},{"id":"20220816","title":"What happens when jdk compiles the generic type <T>","date":"2022-08-16","category":["backend","java"],"tag":["Generic","Type Erasure","ClassCastException"]}]},"__N_SSG":true}
{"pageProps":{"post":{"id":"20230209","content":"\n## function 개발 시 기본값 매개변수 사용(Default Parameters)과 object literals 에서 전개 구문(Spread syntax)\n### [Default Parameters](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters)\n- 함수의 매개변수로 정의되었으나 호출 시 undefined가 넘겨지는 경우.\n  ```javascript\n  function func1(value1 = 1){\n    return value1;\n  }\n  func1();  //1\n  func1(3); //3\n  ```\n  - 아래와 같이 undefined인 경우에 대한 예외처리를 하지 않아도 된다.\n  ```javascript\n  function func1(value1){\n    return value1 || 1;\n  }\n  func1();  //1\n  func1(3); //3\n  ```\n- 매개변수가 여러개인 경우 앞쪽 매개변수를 뒷쪽 매개변수 정의하는데에 사용할 수 있다.\n  ```javascript\n  function func2(value1, value2 = value1*10){\n    return value1+value2;\n  }\n  func2(2);     //22\n  func2(2, 31); //33\n  ```\n  - 앞쪽 매개변수에만 기본값이 있는 경우 아래와 같은 결과가 발생한다.\n  ```javascript\n  function func2(value1 = 3, value2 = value1*10){\n    return value1+value2;\n  }\n  func2(2);  //22\n  func2(31); //341\n  func2(undefined, 31); //34\n  ```\n\n### [Spread syntax in object literals]([https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Default_parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals))\n- js로 객체를 생성 할 때 같은 이름의 변수를 2번 이상 사용하는 경우 나중에 작성되는 값으로 최종 할당된다.\n  이러한 경우는 spread syntax를 사용할 때에도 마찬가지이다.\n  ```javascript\n  const defaultObj = {\n    prop1: 10,\n    prop2: 'title'\n  };\n  const data1 = {\n    prop1: 30,\n    prop2: 'description',\n    ...defaultObj\n  };\n  const data2 = {\n    prop1: 40,\n    ...defaultObj\n  };\n  const data3 = {\n    ...defaultObj,\n    prop1: 20,\n    prop2: 'tags'\n  };\n  console.log(data1); //{prop1: 10, prop2: 'title'};\n  console.log(data2); //{prop1: 10, prop2: 'title'};\n  console.log(data3); //{prop1: 20, prop2: 'tags'};\n  ```\n\n### 함수의 파라미터로 위의 두 개념을 모두 사용하는 경우\n- 함수의 파라미터로 객체를 받는 경우, 객체의 구성 요소 중 일부만 넘기고 나머지는 기본 값으로 사용할 수 있다.\n  ```javascript\n  let defaultObject = {\n    prop1: 10,\n    prop2: 'title\n  };\n  \n  function func3(obj = defaultObject){\n    return {\n      ...defaultObject,\n      ...obj\n    };\n  }\n  \n  func3({prop2: 'description'}); //{prop1: 10, prop2: 'description'}\n  ```\n","title":"[js] Default parameters of function & Spread syntax in object literals","date":"2023-02-09","category":["frontend","javascript"],"tag":["javascript","es5","default parameter","spread syntax"]},"prev":{"id":"20221114","title":"Github Action - AWS EC2에 SpringBoot 배포","date":"2022-11-14","category":["tool","git"],"tag":["git-action","Git","aws"]},"next":{"id":"20230216","title":"Facade Pattern (파사드 패턴)","date":"2023-02-16","category":["SW","design pattern"],"tag":["oop","design pattern"]},"nearPost":[{"id":"20230526","title":"Java Bean Mapping library 적용 - MapStruct","date":"2023-05-26","category":["backend","spring"],"tag":["MapStruct","jpa","java"]},{"id":"20230221","title":"wsl.exe 실행되지 않음","date":"2023-02-21","category":["OS","window"],"tag":["wsl","ubuntu"]},{"id":"20230216","title":"Facade Pattern (파사드 패턴)","date":"2023-02-16","category":["SW","design pattern"],"tag":["oop","design pattern"]},{"id":"20221114","title":"Github Action - AWS EC2에 SpringBoot 배포","date":"2022-11-14","category":["tool","git"],"tag":["git-action","Git","aws"]},{"id":"20221109","title":"Ubuntu 명령어 정리(2)","date":"2022-11-09","category":["os","linux"],"tag":["command"]}]},"__N_SSG":true}
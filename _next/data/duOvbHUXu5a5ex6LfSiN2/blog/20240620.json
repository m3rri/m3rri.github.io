{"pageProps":{"post":{"id":"20240620","content":"\n### 학습 배경\n\n-   AWS에서 Azure로 마이그레이션을 앞두고 Azure Basic workshop에 참석했는데,  \n    네트워크 지식이 너무 없어서 인프라 셋업 내용을 이해하지 못한 점을 보완하기 위함\n-   YouTube [조코딩-꼭 알아야 하는 네트워크 지식...(feat.강민철)](https://youtu.be/b_V79kE9hhA?si=Z40peRMNeeeno12q) 영상을 요약하고 정리하였음\n\n---\n\n## 거시적으로 본 네트워크 기초\n\n### 1. 네트워크의 기본 구조\n\n![image](https://github.com/m3rri/m3rri.github.io/assets/37619441/2af8150f-40cd-4d08-b3c6-97aa98023334)  \n출처 : [midinum - Swapnil Bandgar](https://medium.com/analytics-vidhya/networks-in-data-science-99c14e0150ea)\n\n1. 호스트\n\n-   위 그림에서 까만 원=node들 중, 네트워크 정보를 송신/수신하려고 하는 node\n-   네트워크 통신을 하기 위해 인터넷에 연결된 상태여야 함\n-   서버, 클라이언트도 네트워크 통신 관점에서는 모두 호스트\n\n2. 네트워크 장비\n\n-   라우터, 스위치 등 호스트 간의 정보 전달을 서포트하는 node\n\n3. 통신 매체\n\n-   위 그림에서 까만 선=link에 해당하며 정보가 전달될 때 매질의 역할을 한다고 이해함\n-   유선 매체 - 케이블 / 무선 매체 - wifi\n\n**네트워크** = { 호스트, 네트워크 장비, 통신 매체, 메시지(정보) }\n\n### 2. 네트워크의 분류\n\n1. 범위에 따른 분류\n\n-   LAN (Local Area Network) : 한정된 공간 안에서 Node들 끼리 연결함(집, 회사, 학교 등..)\n-   WAN (Wide Area Network) : 광역 범위를 연결하는 방식\n    -   LAN 내부의 호스트가 다른 지역의 LAN과 통신하고자 할 때 필요하고, 각각의 LAN에 연결된 라우터간에 정보가 전달된다\n    -   LAN은 인프라 엔지니어가 직접 구축 가능하지만, WAN의 경우 ISP(Internet Service Provider)가 주체가 되어 구축한다(KT,SKT,LGU...)\n\n2. 메시지 교환 방식에 다른 분류\n\n-   회선 교환 : 메시지 교환 전, 회선(메시지 전송로)를 설정하고 그곳으로만 통신이 이루어짐(전화망)\n    회선을 생성한 뒤 지속적으로 통신이 이루어지지 않는 경우 이용 효율이 낮아지게 된다\n-   패킷 교환 : 메시지를 쪼갠 뒤 패킷으로 만들어 송신/수신(수신지에서 원래 데이터로 재결합됨)\n    -   노드간 링크를 다수의 패킷이 공유하는 형태로, 라우터를 통해 효율적인 링크를 조합하여 목적 호스트로 전달한다\n    -   쪼개진 패킷은 고유 번호를 가지고 있고 독립적으로 송신된다\n    -   패킷은 헤더 / 페이로드 / 트레일러(Optional)로 구성되며 실질적으로 전달하고자 하는 메시지는 페이로드에 해당한다\n\n## 미시적으로 본 네트워크 기초\n\n### 1. 프로토콜\n\n-   노드 간 정보 전달 규칙. 호스트-네트워크 장비-호스트 이동 시 동일한 프로토콜을 사용해야 전달이 정상적으로 이루어 진다\n-   프로토콜마다 목적과 특징이 서로 다르며 그에 따른 헤더를 포함하고 있다\n    -   IP(Internet Protocol) : 패킷을 수신지까지 전달하기 위해 사용\n    -   HTTP(Hyper Text Transfer Protocol) : 클라이언트와 서버 사이에 이루어지는 요청/응답 프로토콜\n    -   TCP(Transmission Control Protocol) : 데이터가 정확하게 수신 됐는지 집중하기 위해 사용\n\n[TCP와 IP 추가설명 - 그림으로 쉽게 보는 TCP](https://brunch.co.kr/@swimjiy/35)\n\n### 2. 네트워크 참조 모델\n\n-   통신이 이루어지는 단계를 계층으로 표현함. 대표적으로 OSI 모델(OSI 7계층), TCP/IP 모델이 있다\n-   패킷을 주고받는 과정에는 정형화된 순서 = 계층이 있음\n-   계층마다 포함되는 프로토콜이 서로 다름(HTTP: 응용, TCP: 전송, IP: 네트워크)\n-   OSI 기준 전송계층 ~ 응용계층을 상위 계층, 물리계층 ~ 네트워크 계층을 하위 계층이라고 일컫는다\n-   데이터 단위(OSI 기준)\n    -   응용계층 - 메시지 (응용 프로그램이 서비스를 받는 계층)\n    -   전송계층 - 세그먼트\n        -   관련 장비 : Gateway\n    -   네트워크계층(인터넷계층) - 패킷(IP패킷)\n    -   데이터링크계층 - 프레임\n    -   물리계층 - 비트(전기 신호로 정보 전달이 이루어지는 계층)\n\n![image](https://github.com/m3rri/m3rri.github.io/assets/37619441/11736eb2-cf50-439e-8df0-ea559daffb7b)\n\n🔼OSI 모델. 출처 : [OSI 참조모델](https://velog.io/@jeongpar/OSI-%EC%B0%B8%EC%A1%B0%EB%AA%A8%EB%8D%B8)\n\n### 3. 캡슐화/역캡슐화\n\n1. 캡슐화 : 데이터를 송신할 때 계층마다 헤더, 트레일러가 추가되는 과정\n\n-   아래 그림과 같이 상위계층에서 헤더+페이로드가 결합된 형태는 하위 계층에서 페이로드가 되며, 여기에 다시 해당 계층의 헤더를 추가하여 하위 계층으로 넘겨준다\n    ![image](https://github.com/m3rri/m3rri.github.io/assets/37619441/2d411086-2274-4630-9528-e6e70f851634)\n\n    출처 : [OSI 참조모델](https://velog.io/@jeongpar/OSI-%EC%B0%B8%EC%A1%B0%EB%AA%A8%EB%8D%B8)\n\n2. 역캡슐화 : 데이터를 수신할 때 캡슐화의 반대 순서로 페이로드를 읽어 나가는 과정\n","title":"기초 네트워크[유투브 조코딩 - 꼭 알아야 하는 네트워크 지식...(feat.강민철)","date":"2024-06-20","category":["infra","network"],"tag":["network","http"]},"prev":{"id":"20230925","title":"Bastion Host 사용하여 RDS 접속하기","date":"2023-09-25","category":["Cloud","aws"],"tag":["BastionHost","RDS"]},"next":{"id":"20241023","title":"로컬에서 minikube로 k8s 맛보기","date":"2024-10-23","category":["infra","kubernetes"],"tag":["devops","k8s","ingress"]},"nearPost":[{"id":"20241127","title":"File Upload에 필요한 Request Annotation(@RequestParam, @RequestPart, @ModelAttribute, @RequestBody)","date":"2024-11-27","category":["backend","spring"],"tag":["@RequestPart","@RequestParam","@ModelAttribute","@RequestBody"]},{"id":"20241119","title":"웹 취약점","date":"2024-11-19","category":["sw","security"],"tag":["web security","web취약점"]},{"id":"20241023","title":"로컬에서 minikube로 k8s 맛보기","date":"2024-10-23","category":["infra","kubernetes"],"tag":["devops","k8s","ingress"]},{"id":"20230925","title":"Bastion Host 사용하여 RDS 접속하기","date":"2023-09-25","category":["Cloud","aws"],"tag":["BastionHost","RDS"]},{"id":"20230526","title":"Java Bean Mapping library 적용 - MapStruct","date":"2023-05-26","category":["backend","spring"],"tag":["MapStruct","jpa","java"]}]},"__N_SSG":true}